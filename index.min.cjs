"use strict";var axios=require("axios");function Cache(){var a=Object.create(null);function e(e){delete a[e]}this.set=function(n,t,i,o){if(void 0!==o&&("number"!=typeof o||isNaN(o)||o<=0))throw new Error("Cache timeout must be a positive number");var r=a[n];r&&clearTimeout(r.timeout);var s={value:t,expire:o+Date.now()};return isNaN(s.expire)||(s.timeout=setTimeout((()=>e(n)),o)),a[n]=s,t},this.del=function(n){var t=!0,i=a[n];return i?(clearTimeout(i.timeout),!isNaN(i.expire)&&i.expire<Date.now()&&(t=!1)):t=!1,t&&e(n),t},this.clear=function(){for(var e in a)clearTimeout(a[e].timeout);a=Object.create(null)},this.get=function(e){var n=a[e];if(void 0!==n){if(isNaN(n.expire)||n.expire>=Date.now())return n.value;delete a[e]}return null}}const exp=new Cache;exp.Cache=Cache;const base="https://translate.googleapis.com/translate_a/single";var google={fetch:({key:a,from:e,to:n,text:t})=>[`${base}?client=gtx&sl=${e}&tl=${n}&dt=t&q=${encodeURIComponent(t)}`],parse:a=>{let e=a.data;if(e=e&&e[0]&&e[0][0]&&e[0].map((a=>a[0])).join(""),!e)throw new Error("Translation not found");return e}},yandex={needkey:!0,fetch:({key:a,from:e,to:n,text:t})=>[`https://translate.yandex.net/api/v1.5/tr.json/translate?key=${a}&lang=${e}-${n}&text=${encodeURIComponent(t)}`,{method:"POST",body:{}}],parse:a=>{const e=a.data;if(200!==e.code)throw new Error(e.message);return e.text[0]}};const libreUrl="https://libretranslate.com/translate";var libre={needkey:!1,fetch:({url:a=libreUrl,key:e,from:n,to:t,text:i})=>[a,{method:"POST",body:{q:i,source:n,target:t,api_key:e},headers:{"Content-Type":"application/json"}}],parse:a=>{const e=a.data;if(!e)throw new Error("No response found");if(e.error)throw new Error(e.error);if(!e.translatedText)throw new Error("No response found");return e.translatedText}},deepl={needkey:!0,fetch:({key:a,from:e,to:n,text:t})=>[`https://api${a.endsWith(":fx")?"-free":""}.deepl.com/v2/translate?auth_key=${a}&source_lang=${e}&target_lang=${n}&text=${t=encodeURIComponent(t)}`,{method:"POST",body:{}}],parse:async a=>{if(!a.ok){if(403===a.status)throw new Error("Auth Error, please review the key for DeepL");throw new Error(`Error ${a.status}`)}return a.data.translations[0].text}},engines={google:google,yandex:yandex,libre:libre,deepl:deepl},iso={aar:"aa",abk:"ab",afr:"af",aka:"ak",alb:"sq",amh:"am",ara:"ar",arg:"an",arm:"hy",asm:"as",ava:"av",ave:"ae",aym:"ay",aze:"az",bak:"ba",bam:"bm",baq:"eu",bel:"be",ben:"bn",bih:"bh",bis:"bi",bos:"bs",bre:"br",bul:"bg",bur:"my",cat:"ca",cha:"ch",che:"ce",chi:"zh",chu:"cu",chv:"cv",cor:"kw",cos:"co",cre:"cr",cze:"cs",dan:"da",div:"dv",dut:"nl",dzo:"dz",eng:"en",epo:"eo",est:"et",ewe:"ee",fao:"fo",fij:"fj",fin:"fi",fre:"fr",fry:"fy",ful:"ff",geo:"ka",ger:"de",gla:"gd",gle:"ga",glg:"gl",glv:"gv",gre:"el",grn:"gn",guj:"gu",hat:"ht",hau:"ha",heb:"he",her:"hz",hin:"hi",hmo:"ho",hrv:"hr",hun:"hu",ibo:"ig",ice:"is",ido:"io",iii:"ii",iku:"iu",ile:"ie",ina:"ia",ind:"id",ipk:"ik",ita:"it",jav:"jv",jpn:"ja",kal:"kl",kan:"kn",kas:"ks",kau:"kr",kaz:"kk",khm:"km",kik:"ki",kin:"rw",kir:"ky",kom:"kv",kon:"kg",kor:"ko",kua:"kj",kur:"ku",lao:"lo",lat:"la",lav:"lv",lim:"li",lin:"ln",lit:"lt",ltz:"lb",lub:"lu",lug:"lg",mac:"mk",mah:"mh",mal:"ml",mao:"mi",mar:"mr",may:"ms",mlg:"mg",mlt:"mt",mon:"mn",nau:"na",nav:"nv",nbl:"nr",nde:"nd",ndo:"ng",nep:"ne",nno:"nn",nob:"nb",nor:"no",nya:"ny",oci:"oc",oji:"oj",ori:"or",orm:"om",oss:"os",pan:"pa",per:"fa",pli:"pi",pol:"pl",por:"pt",pus:"ps",que:"qu",roh:"rm",rum:"ro",run:"rn",rus:"ru",sag:"sg",san:"sa",sin:"si",slo:"sk",slv:"sl",sme:"se",smo:"sm",sna:"sn",snd:"sd",som:"so",sot:"st",spa:"es",srd:"sc",srp:"sr",ssw:"ss",sun:"su",swa:"sw",swe:"sv",tah:"ty",tam:"ta",tat:"tt",tel:"te",tgk:"tg",tgl:"tl",tha:"th",tib:"bo",tir:"ti",ton:"to",tsn:"tn",tso:"ts",tuk:"tk",tur:"tr",twi:"tw",uig:"ug",ukr:"uk",urd:"ur",uzb:"uz",ven:"ve",vie:"vi",vol:"vo",wel:"cy",wln:"wa",wol:"wo",xho:"xh",yid:"yi",yor:"yo",zha:"za",zul:"zu"},names={afar:"aa",abkhazian:"ab",afrikaans:"af",akan:"ak",albanian:"sq",amharic:"am",arabic:"ar",aragonese:"an",armenian:"hy",assamese:"as",avaric:"av",avestan:"ae",aymara:"ay",azerbaijani:"az",bashkir:"ba",bambara:"bm",basque:"eu",belarusian:"be",bengali:"bn","bihari languages":"bh",bislama:"bi",tibetan:"bo",bosnian:"bs",breton:"br",bulgarian:"bg",burmese:"my",catalan:"ca",valencian:"ca",czech:"cs",chamorro:"ch",chechen:"ce",chinese:"zh","church slavic":"cu","old slavonic":"cu","church slavonic":"cu","old bulgarian":"cu","old church slavonic":"cu",chuvash:"cv",cornish:"kw",corsican:"co",cree:"cr",welsh:"cy",danish:"da",german:"de",divehi:"dv",dhivehi:"dv",maldivian:"dv",dutch:"nl",flemish:"nl",dzongkha:"dz",greek:"el",english:"en",esperanto:"eo",estonian:"et",ewe:"ee",faroese:"fo",persian:"fa",fijian:"fj",finnish:"fi",french:"fr","western frisian":"fy",fulah:"ff",georgian:"ka",gaelic:"gd","scottish gaelic":"gd",irish:"ga",galician:"gl",manx:"gv",guarani:"gn",gujarati:"gu",haitian:"ht","haitian creole":"ht",hausa:"ha",hebrew:"he",herero:"hz",hindi:"hi","hiri motu":"ho",croatian:"hr",hungarian:"hu",igbo:"ig",icelandic:"is",ido:"io","sichuan yi":"ii",nuosu:"ii",inuktitut:"iu",interlingue:"ie",occidental:"ie",interlingua:"ia",indonesian:"id",inupiaq:"ik",italian:"it",javanese:"jv",japanese:"ja",kalaallisut:"kl",greenlandic:"kl",kannada:"kn",kashmiri:"ks",kanuri:"kr",kazakh:"kk","central khmer":"km",kikuyu:"ki",gikuyu:"ki",kinyarwanda:"rw",kirghiz:"ky",kyrgyz:"ky",komi:"kv",kongo:"kg",korean:"ko",kuanyama:"kj",kwanyama:"kj",kurdish:"ku",lao:"lo",latin:"la",latvian:"lv",limburgan:"li",limburger:"li",limburgish:"li",lingala:"ln",lithuanian:"lt",luxembourgish:"lb",letzeburgesch:"lb","luba-katanga":"lu",ganda:"lg",macedonian:"mk",marshallese:"mh",malayalam:"ml",maori:"mi",marathi:"mr",malay:"ms",malagasy:"mg",maltese:"mt",mongolian:"mn",nauru:"na",navajo:"nv",navaho:"nv","ndebele, south":"nr","south ndebele":"nr","ndebele, north":"nd","north ndebele":"nd",ndonga:"ng",nepali:"ne","norwegian nynorsk":"nn","nynorsk, norwegian":"nn","norwegian bokmål":"nb","bokmål, norwegian":"nb",norwegian:"no",chichewa:"ny",chewa:"ny",nyanja:"ny",occitan:"oc",ojibwa:"oj",oriya:"or",oromo:"om",ossetian:"os",ossetic:"os",panjabi:"pa",punjabi:"pa",pali:"pi",polish:"pl",portuguese:"pt",pushto:"ps",pashto:"ps",quechua:"qu",romansh:"rm",romanian:"ro",moldavian:"ro",moldovan:"ro",rundi:"rn",russian:"ru",sango:"sg",sanskrit:"sa",sinhala:"si",sinhalese:"si",slovak:"sk",slovenian:"sl","northern sami":"se",samoan:"sm",shona:"sn",sindhi:"sd",somali:"so","sotho, southern":"st",spanish:"es",castilian:"es",sardinian:"sc",serbian:"sr",swati:"ss",sundanese:"su",swahili:"sw",swedish:"sv",tahitian:"ty",tamil:"ta",tatar:"tt",telugu:"te",tajik:"tg",tagalog:"tl",thai:"th",tigrinya:"ti",tonga:"to",tswana:"tn",tsonga:"ts",turkmen:"tk",turkish:"tr",twi:"tw",uighur:"ug",uyghur:"ug",ukrainian:"uk",urdu:"ur",uzbek:"uz",venda:"ve",vietnamese:"vi","volapük":"vo",walloon:"wa",wolof:"wo",xhosa:"xh",yiddish:"yi",yoruba:"yo",zhuang:"za",chuang:"za",zulu:"zu"};const isoKeys=Object.values(iso).sort();var languages=a=>{if("string"!=typeof a)throw new Error('The "language" must be a string, received '+typeof a);if(a.length>100)throw new Error(`The "language" is too long at ${a.length} characters`);if(a=a.toLowerCase(),a=names[a]||iso[a]||a,!isoKeys.includes(a))throw new Error(`The language "${a}" is not part of the ISO 639-1`);return a};class Translate{options={from:"en",to:"en",cache:void 0,engine:"google",key:void 0,url:"translate",languages:languages,engines:engines,keys:{},isExInCache:!0};cache;cacheParams;constructor(a=exp,e={}){this.cache=a,this.options={...this.options,...e},this.cacheParams=this.options.isExInCache?["EX",604800]:[604800]}async translate(a,e={}){"string"==typeof e&&(e={to:e});const n=Object.keys(e).find((a=>"from"!==a&&"to"!==a));if(n)throw new Error(`Invalid option with the name '${n}'`);e.from=languages(e.from||this.options.from),e.to=languages(e.to||this.options.to),e.cache=this.options.cache,e.engine=this.options.engine,e.url=this.options.url,e.id=`${e.url}:${e.from}:${e.to}:${e.engine}:${e.text}`,e.keys=this.options.keys||{};for(let a in this.options.keys)e.keys[a]=e.keys[a]||this.options.keys[a];e.key=e.key||this.options.key||e.keys[e.engine];const t=this.options.engines[e.engine],i=a.split(",").map((a=>a.trim())).map((a=>a.toLowerCase())),o=i.reduce(((a,e)=>({...a,[e]:e})),{});for(const a of i){const n=this.getId(e,a),t=await this.cache.get(n);t&&(o[a]=t)}const r=i.filter((a=>a===o[a]));if(e.text=r.join(", "),!r.length)return Object.values(o).join(", ");if(e.to===e.from)return Promise.resolve(e.text);if(t.needkey&&!e.key)throw new Error(`The engine "${e.engine}" needs a key, please provide it`);const s=t.fetch(e);return await axios(...s).then(t.parse).then((async a=>{const n=a.split(",").map((a=>a.trim())).map((a=>a.toLowerCase()));for(const a of r){const t=r.indexOf(a);await this.cache.set(this.getId(e,a),n[t],...this.cacheParams),o[a]=n[t]}return Object.values(o).join(", ")})).then((a=>a))}getId(a,e){return`${a.url}:${a.from}:${a.to}:${a.engine}:${e}`}}module.exports=Translate;